private List<List<Integer>> res;
private Integer[] path;
private boolean[] filled;

public List<List<Integer>> permutation(int[] nums) {
    res = new LinkedList<>();
    path = new Integer[nums.length];
    filled = new boolean[nums.length];

    Arrays.sort(nums);

    dfs(nums, 0, 0);

    return res;
}

private void dfs(int[] nums, int index, int start) {
    if (index == nums.length) {
        res.add(new LinkedList<>(Arrays.asList(path)));
        return;
    }

    if (index != 0 && nums[index] != nums[index - 1]) start = 0;
    for (int i = start; i < path.length; ++i) {
        if (filled[i]) continue;

        filled[i] = true;
        path[i] = nums[index];

        dfs(nums, index + 1, i + 1);

        filled[i] = false;
    }
}
