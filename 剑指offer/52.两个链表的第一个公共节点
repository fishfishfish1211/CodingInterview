public ListNode findFirstCommonNode(ListNode headA, ListNode headB) {
    ListNode loopA = findLoopNode(headA);
    ListNode loopB = findLoopNode(headB);

    if (loopA == null && loopB == null) return noLoop(headA, headB);
    if (loopA != null && loopB != null) return bothLoop(headA, loopA, headB, loopB);
    return null;
}

private ListNode findLoopNode(ListNode head) {
    ListNode fast = head, slow = head;
    while (fast != null && fast.next != null) {
        fast = fast.next.next;
        slow = slow.next;

        if (fast == slow) {
            fast = head;
            while (fast != slow) {
                fast = fast.next;
                slow = slow.next;
            }
            return fast;
        }
    }

    return null;
}

private ListNode noLoop(ListNode head1, ListNode head2) {
    if (head1 == null || head2 == null) return null;

    int len1 = 1;
    ListNode cur1 = head1;
    while (cur1.next != null) {
        cur1 = cur1.next;
        ++len1;
    }

    int len2 = 1;
    ListNode cur2 = head2;
    while (cur2.next != null) {
        cur2 = cur2.next;
        ++len2;
    }

    // 如果最后一个节点不是同一个节点，说明不相交
    if (cur1 != cur2) return null;

    // cur1指向较长的那个链表，cur2指向较短的那个链表，step表示两条链表的长度差
    int step;
    if (len1 > len2) {
        cur1 = head1;
        cur2 = head2;
        step = len1 - len2;
    } else {
        cur1 = head2;
        cur2 = head1;
        step = len2 - len1;
    }

    // 长的链表先走 step 步
    for (int i = 0; i < step; ++i) cur1 = cur1.next;

    while (cur1 != cur2) {
        cur1 = cur1.next;
        cur2 = cur2.next;
    }

    return cur1;
}

private ListNode bothLoop(ListNode head1, ListNode loop1, ListNode head2, ListNode loop2) {
    if (loop1 == loop2) {
        int len1 = 0;
        ListNode cur1 = head1;
        while (cur1 != loop1) {
            cur1 = cur1.next;
            ++len1;
        }

        int len2 = 0;
        ListNode cur2 = head2;
        while (cur2 != loop1) {
            cur2 = cur2.next;
            ++len2;
        }

        int step;
        if (len1 > len2) {
            cur1 = head1;
            cur2 = head2;
            step = len1 - len2;
        } else {
            cur1 = head2;
            cur2 = head1;
            step = len2 - len1;
        }

        for (int i = 0; i < step; ++i) cur1 = cur1.next;

        while (cur1 != cur2) {
            cur1 = cur1.next;
            cur2 = cur2.next;
        }

        return cur1;
    }

    ListNode cur1 = loop1;
    while (cur1.next != loop1) {
        cur1 = cur1.next;

        if (cur1 == loop2) return loop1;
    }

    return null;
}
