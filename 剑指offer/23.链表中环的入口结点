public ListNode entryNodeOfLoop(ListNode head) {
    ListNode fast = head, slow = head;
    while (fast != null && fast.next != null) {
        fast = fast.next.next;
        slow = slow.next;

        if (fast == slow) {
            fast = head;
            while (fast != slow) {
                fast = fast.next;
                slow = slow.next;
            }
            return fast;
        }
    }

    return null;
}

/* 
    证明：
    设链表头到入环节点距离为 a, 入环节点到相遇地点距离为 x, 环的长度为 r
    
    快指针在慢指针绕环前可能绕环走了 n 圈，且必然在慢指针入环后，绕环一圈之前追上慢指针,
    此时慢指针走过的距离 = a + x;
    此时快指针走过的距离 = a + x + n * r;
    快指针的速度是慢指针的2倍： 2 * (a + x) = a + x + n * r;
    => a + x = n * r;
    => a = (n - 1) * r + (n - x);
    => 0 + a = (x + (n - 1) * r + (n - x)) % r;
    
    因此快指针回到起点，再走到 a 节点时，慢指针刚好走到入环点
*/
