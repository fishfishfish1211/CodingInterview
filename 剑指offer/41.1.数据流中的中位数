private PriorityQueue<Integer> big = new PriorityQueue<>();
private PriorityQueue<Integer> small = new PriorityQueue<>(new Comparator<>() {
    @Override
    public int compare(Integer i1, Integer i2) {
        return i2 - i1;
    }
});

public void insert(Integer num) {
    if (small.isEmpty() || num <= small.peek()) small.add(num);
    else big.add(num);

    if (small.size() - big.size() > 1) big.add(small.poll());
    else if (big.size() - small.size() > 1) small.add(big.poll());
}

public Double getMedian() {
    if (small.size() == big.size()) return (small.peek() + big.peek()) / 2.0;

    return 0.0 + (small.size() > big.size() ?  small.peek() : big.peek());
}
