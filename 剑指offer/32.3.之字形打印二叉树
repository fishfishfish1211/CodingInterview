public List<List<Integer>> printFromTopToBottom(TreeNode root) {
    List<List<Integer>> res = new LinkedList<>();
    if (root == null) return res;

    LinkedList<TreeNode> deque = new LinkedList<>();
    deque.add(root);
    boolean left2right = true;
    while (!deque.isEmpty()) {
        int size = deque.size();
        LinkedList<Integer> level = new LinkedList<>();
        res.add(level);
        if (left2right) {
            for (int i = 0; i < size; ++i) {
                root = deque.pollFirst();
                level.add(root.val);
                if (root.left != null) deque.addLast(root.left);
                if (root.right != null) deque.addLast(root.right);
            }
        } else {
            for (int i = 0; i < size; ++i) {
                root = deque.pollLast();
                level.add(root.val);
                if (root.right != null) deque.addFirst(root.right);
                if (root.left != null) deque.addFirst(root.left);
            }
        }

        left2right = !left2right;
    }

    return res;
}
