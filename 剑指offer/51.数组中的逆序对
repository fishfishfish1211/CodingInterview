public int inversePairs(int[] nums) {
    if (nums == null) return 0;

    return mergeSort(nums, 0, nums.length - 1);
}

private int mergeSort(int[] nums, int left, int right) {
    if (left >= right) return 0;

    int mid = left + ((right - left) >> 1);
    return mergeSort(nums, left, mid) + mergeSort(nums, mid + 1, right) + merge(nums, left, mid, right);
}

private int merge(int[] nums, int left, int mid, int right) {
    int[] tmp = new int[right - left + 1];
    int pl = left, pr = mid + 1;
    int index = 0, cnt = 0;
    while (pl <= mid && pr <= right) {
        if (nums[pl] > nums[pr]) {
            cnt += right - pr + 1;
            tmp[index++] = nums[pl++];
        } else {
            tmp[index++] = nums[pr++];
        }
    }

    while (pl <= mid) tmp[index++] = nums[pl++];
    while (pr <= right) tmp[index++] = nums[pr++];

    System.arraycopy(tmp, 0, nums, left, tmp.length);

    return cnt;
}
